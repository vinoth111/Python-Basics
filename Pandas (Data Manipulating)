Python  is a programming language.

It is used for:
1.web development (server-side),
2.software development,
3.mathematics,
4.system scripting


What can Python do???
Python can be used on a server to create web applications.
Python can be used alongside software to create workflows.
Python can connect to database systems. It can also read and modify files.
Python can be used to handle big data and perform complex mathematics.
Python can be used for rapid prototyping, or for production-ready software development.


Why Python????
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-oriented way or a functional way.


Python has the following data types built-in by default, in these categories:
Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview



Examples for data type:
x = "Hello World"	                                       str	
x = 20	                                                   int	
x = 20.5	                                               float	
x = 1j	                                                   complex	
x = ["apple", "banana", "cherry"]	                       list	
x = ("apple", "banana", "cherry")	                       tuple	
x = range(6)	                                           range	
x = {"name" : "John", "age" : 36}	                       dict	
x = {"apple", "banana", "cherry"}	                       set	
x = frozenset({"apple", "banana", "cherry"})	           frozenset	
x = True	                                               bool	
x = b"Hello"	                                           bytes	
x = bytearray(5)                                           bytearray	
x = memoryview(bytes(5))	                               memoryview



Operator	                       Name	                                       Example	
+	                               Addition	                                   x + y	
-	                               Subtraction	                               x - y	
*	                               Multiplication	                           x * y	
/	                               Division                                    x / y	
%	                               Modulus	                                   x % y	
**	                               Exponentiation	                           x ** y	
//	                               Floor division	                           x // y


Four built-in data types in Python used to store collections of data, are List,Tuple, Set, and Dictionary, 

LIST:
1.List items are ordered, changeable, and allow duplicate values.
2.List items are indexed, the first item has index [0], the second item has index [1] etc.
syntax for LIST:
thislist = ["apple", "banana", "cherry"]
print(thislist)


Tuple:
1.Tuple items are ordered, unchangeable, and allow duplicate values.
2.Tuple items are indexed, the first item has index [0], the second item has index [1] etc.
Syntax for Tuple:
thistuple = ("apple", "banana", "cherry")
print(thistuple)


Sets:
1.Set items are unordered, unchangeable,unindexed and do not allow duplicate values.
Syntax for Sets:
thisset = {"apple", "banana", "cherry"}
print(thisset)


Dictionary:
Dictionary items are ordered, changeable, and does not allow duplicates.
Syntax for Dictionary:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

#########################################Basic Programs in Python ###################################################

#count of odd numbers and count of even numbers 
A=[2,5,3,7,9,12,56]
Even=[]
Odd=[]
l=len(A)
for i in range(0,l):
    if A[i]%2==0:
        Even.append(A[i])
    else:
        Odd.append(A[i])
print('Number of even numbers:', len(Even))
print('Number of even numbers:', len(Odd))

#Minimum and Maximum numbers in the list
A=[4,8,99,108,89,566,554,89,65,689,9895]
Min=min(A)
Max=max(A)
print('Minimum number in list:',Min)
print('Maximum number in list:',Max)

#Min and Max without function:
A=[4,8,99,108,89,566,554,89,65,3,689,9895]
Min=[]
l=len(A)
Min1=A[0]
for i in range(0,l):
    if A[i]<Min1:
        Min1=A[i]
        Min=Min1
print('minimum number in the list is:',Min)

#Max number in the list
B=[2,5,6,9,8,55,8,88,555,1,225,8,8,9]
l=len(B)
Max=B[0]
for i in range(0,l):
    if B[i]>Max:
        Max=B[i]
print('Max is:',Max)
 
#Repeated number in the list
A=[1,22,33,6,8,9,7,5,5,6,6,4,88,5,55,99,5]
R=[]
l=len(A)
U=[]
for i in range(0,l):
    if A[i] not in U:
        U.append(A[i])
    else:
        R.append(A[i])
print('repeated numbers :',R)
print('Unique numbers :',U)

##Unique number in list using set(data structure)
A=[1,2,3,3,4,5,3,6,7,6,88,99]
Unique=set(A)
Unique_1=list(Unique)

#Ascending order
A=[1,8,9,66,8,4,6,7,1]
Asc=[]
l=len(A)
for i in range(0,l):
    Asc.append(min(A))
    A.remove(min(A))
print(Asc)

#Descending
A=[1,8,9,66,8,4,6,7,1]
Asc=[]
l=len(A)
for i in range(0,l):
    Asc.append(max(A))
    A.remove(max(A))
print(Asc)

#Reverse the string
Str=input('Enter the string:')
l=len(Str)
New_str=''
for i in range(l):
   New_str=New_str+Str[-1]
   Str=Str[:-1]
   
#Armstrong number
A=895
Temp=A
C=0
while Temp>0:
    B=Temp%10
    C=B*B*B+C
    Temp=Temp//10
if A==C:
    print('The number is armstrong number')
else:
    print('The number is not a armstrong number')
    
#Fibonacci number
No=int(input('Number of terms'))
N1=0
N2=1
count=0
if No<0:
    print('Please enter the posittive integer')
else:
    print('Fibonacci seqence:')
while count<No:
    print(N1)
    Nth=N1+N2
    N1=N2
    N2=Nth
    count+=1

#Check the prime number
A=3
for i in range(2,A):
    if A%i==0:
       print('A is the prime number')
       break
else:
   print('A is not a prime number')

#Factorial of the number

A=int(input('Enter the Factorial terms'))
B=1
for i in range(1,A+1):
    C=B*i
    B=C
print(B)

#Largest of three numbers

A=int(input())
B=int(input())
C=int(input())
if A>B and A>C:
    print('A is the greatest number')
if B>A and B>C:
    print('B is the greatest number')
else:
    print('C is the greatest number')
    
#Leap year
A=int(input('enter the year'))
if (A%4)==0:
    print(A,'is leap year')
else:
    print(A,'is not leap year')

#Positive or negative number

A=int(input())
if A>=0:
    print(A,'is positive integer')
else:
    print(A,'is negative integer')
    
############ Data Manipulation#########################################################################
import pandas as pd

A=pd.read_csv('G:/Interview Preparation/Python/Dataset_Pandas/NetflixOriginals.csv')
print(A)

## First 10 and Last 10 rows
First_20=A.head(20)
Last_20=A.tail(20)
    
###LOC and ILOC:

##LOC(Label)

loc_data=A
A1=loc_data.loc[4,'Title'] ## Takes 4th row in the column Tite##3
A2=loc_data.loc[4]### Takes fourth row fully
A3=loc_data.loc[0:4]###Takes 0 to 4th row the entire row
A4=loc_data.loc[0:4,['Title','Genre']]##Takes 0 to 4th row and takes only Title and Genre columns
A5=loc_data.loc[0:4,'Title':'IMDB Score']##Takes 0 to 4 row and Takes data from Title to IMDB Score
A6=loc_data.loc[0:4,'Title']###Takes 0 to 4th row the entire row


##ILOC(INDEX)[if it is : then it leaves last element]
iloc_data=A
B1=iloc_data.iloc[4,0] ## Takes 4th row in the first column(0)
B2=iloc_data.iloc[4]### Takes fourth row fully
B3=iloc_data.iloc[0:4]###Takes 0 to 3rd row only the entire row
B4=iloc_data.iloc[0:4,[0,1]]##Takes 0 to 3rd row and takes only Title and Genre columns
B5=iloc_data.iloc[0:4,0:5]##Takes 0 to 3rd and Takes data from 0 to 4th column
B6=iloc_data.iloc[0:4,1]###Takes 0 to 3rd row and second column(1) only the entire row

##LIST SLICE
A_list=[1,2,3,4,5,6,7,8,9]
# Starts from first element 0 to n #
# Starts from last elements -1 to 0 #
First_index=A_list[0]### Takes first element
last_index=A_list[-1]###Takes last element
L1=A_list[0:3]##Takes first three element[1,2,3]
L2=A_list[:-3]## Takes all elements except last three element[1,2,3,4,5,6]
L3=A_list[2:-3]# Takes from index 2 and remove last three elements.

### Concat two data frame####
C1=First_20
C2=Last_20

Con_1=pd.concat([C1,C2])### Default concat,one table goes under another table since they have similar field names
Con_2=pd.concat([C1,C2],axis=0)### row wise concate same as default one.
Con_3=pd.concat([C1,C2],axis=0,ignore_index=True)##Index number starts arranging itself from 0 to n in order
Con_4=pd.concat([C1,C2],axis=1)### Concat column wise create same field name and fills it.
Con_5=pd.concat([C1,C2],axis=0,keys=['C1','C2'])##It creates a row index name C1,C2 and fills it in row
Con_6=pd.concat([C1,C2],axis=1,keys=['C1','C2'])##It creates a column index name C1,C2 and fills it in column
Con_7=Con_5.loc['C2']## Index are name with C1 and C2 so if we want to take only C2 rows.


###Merge.

M1=First_20[['Title','Genre']]
M2=First_20[['Title','IMDB Score']]

Mer_1=pd.merge(M1,M2,on='Title')##Normal merge(intersect), it merges both table because title is common(Common elements)
Mer_2=pd.merge(M1,M2,on='Title',how='outer')## Takes all the elements from both table.
Mer_3=pd.merge(M1,M2,on='Title',how='left')##Takes only common and left table element.
Mer_4=pd.merge(M1,M2,on='Title',how='right')##Takes only common and right table element

Mer_Ind=pd.merge(M1,M2,on='Title',how='left',indicator=True)## Indicator true tells us whether the elements in both,left,right

Merge suffixes:
Mer_suf_1=First_20
Mer_suf_2=Last_20
Mer_suf=pd.merge(Mer_suf_1,Mer_suf_2,on='Title',how='outer',suffixes=("_left","_right"))
#If two table has same column it take the same column as x and y column so we are replacing the names as left and right



##How to create dataframe:
##Using Dictionary
Data= {'Name': ['Tom', 'Joseph', 'Krish', 'John','ram'], 'Age': [20, 21, 19, 18,25]}    
DF=pd.DataFrame(Data)   
##using LIST:
Data = [['tom', 10], ['nick', 15], ['juli', 14]]
DF = pd.DataFrame(data, columns = ['Name', 'Age'])
##With index
Data= {'Name': ['Tom', 'Joseph', 'Krish', 'John','ram'], 'Age': [20, 21, 19, 18,25]}    
DF=pd.DataFrame(Data,index =['rank1','rank2','rank3','rank4'])##Index will be rank1,rank2,rank3... column are same



###Add column to dataframe
cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],
        'Price': [22000,25000,27000,35000]}

DC= pd.DataFrame(cars, columns = ['Brand','Price'])
print(DC)
Discount=[2000,4000,5000,3000]## which column to be added
DC['Discount']=Discount## Adding discount column in DC.
## Another way of adding column
Extra_Column=A['IMDB Score']
DC['IMDB Score']=Extra_Column###VERY IMPORTANT NOTE. INDEX SHOULD BE SAME IN BOTH TABLE THEN ONLY YOU CAN TAKE AND ADD


###Remove column from dataframe..
# REMOVE COLUMN=RC
RC=A.drop('IMDB Score',axis=1)##REMOVE ONE COLUMN ,AXIS=1 is column.
RC=A.drop('IMDB Score',axis=1,inplace=True)##REMOVE ONE COLUMN ,AXIS=1 is column.
#IMPLACE=TRUE MEANS IT CHANGES PERMANENTLY IN A Variable,Inplace false will change in assigned variable
RC_2=A.drop(['IMDB Score','Title'],axis=1)##Remove two column,axis=1 is column.

# REMOVE ROW=RW(iloc and loc slice the table and give the value, drop remove that value from the table)
RW=A.drop(0,axis=0)#it removes 0 row only ,axis=0 is row
RW_1=A.drop([0,5],axis=0)##It removes 0 and 5 th row only



##Shape in Python(row and column count)
S=A.shape##Tells you rows and column
S_0=A.shape[0]# Tells you no of rows
S_1=A.shape[1]#tells you no of column



##to check the column names
col_names=A.columns##display column names
col_uniq=A.columns.unique()##display unique column names



#Rename column name:
R=A.rename(columns={'Title':'Padamperu','IMDB Score':'Mark'})#Rename column in the table



##Remove duplicates
D=A.drop_duplicates()##Remove all duplicates if the entire row is repeated
D_1=A.drop_duplicates(subset='IMDB Score')##remove duplicates in IMDB Score column and takes first one by default
D_2=A.drop_duplicates(subset=['IMDB Score','Title'],keep='first')#check two columns keep = first means it takes first


#Filter particular value in row and column:
pv=A
pv.columns = pv.columns. str. replace(' ','_')
pv_1=[2.6,4.1]
pv_2=pv[pv.IMDB_Score.isin(pv_1)]
pv_3=['English']
pv_4=pv[pv.Language.isin(pv_3)]


#Null value removal
Null=pd.read_csv('G:/Interview Preparation/Python/Dataset_Pandas/NetflixOriginals_with null values.csv')
NULL_1 = Null.dropna()##remove all the rows if any of the columns has "NA" it doesnot remove NAN.
NULL_2 = Null.dropna(axis=1)##Remove all the columns if any of the columns has 'NA'doesnt remove NAN
NULL_3 = Null.dropna(how='all')##Remove ony if all rows has na values
NULL_4 = Null.dropna(how='all',axis=1)## Remove only if all the columns havinf na values
NULL_5 = Null.dropna(thresh=2)##Keep only the rows with at least 2 non-NA values.
##Replace_Null with zero
Replace_Null=Null
Replace_Null['Premiere']= Null['Premiere'].fillna(0)

##Remove having one and zero:
Zero_One=Null
Remove_Zero= Zero_One[Zero_One['IMDB Score']!= 0]
Remove_One= Zero_One[Zero_One['IMDB Score']!= 1]
##Replace 0 and one with average value
Zero_One=Null
Zero_One['IMDB Score']=Zero_One['IMDB Score'].replace(0,Zero_One['IMDB Score'].mean())
Zero_One['IMDB Score']=Zero_One['IMDB Score'].replace(1,Zero_One['IMDB Score'].mean())
##Filter the string
Zero_One=Null
Zero_One=Zero_One[Zero_One['Language'].str.contains("English",na=False)]##it has NA VALUES SO ERROR CAME SO PUT na=False



###Small loop functions for practice:
Loop=A
#IMDB 2 to 3 means Worst movie
#IMDB 3 to 4 means average movie
#IMDB 4 to 5 means good movie
import numpy as np
Loop['Result'] =np.where((Loop['IMDB Score'] >= 1) & (Loop['IMDB Score'] <= 3), 
                  'Worst movie', np.where((Loop['IMDB Score']> 3) & (Loop['IMDB Score'] <= 4), 
                  'Average movie', np.where((Loop['IMDB Score'] > 4) & (Loop['IMDB Score'] <= 5), 
                  'Good movie', 'No result')))##NOT SURE WHY IT IS CHANGING IN PRIMARY A VARIABLE



####Datatype change
A.dtypes##tell the datatype of all the columns

##Column names with spaces is a big problem :
A.columns = A.columns. str. replace(' ','_')
Null.columns = Null.columns. str. replace(' ','_')


##Get the Duplicated items in dataframe
B=A[A.duplicated(['Premiere'], keep=False)]#Take only repeated value and give it to us

##Count of NAN in dataframe or count of any value in dataframe
Na_count=Null['Premiere'].isna().sum()##count of NA
Title_count=A.Title.count()##Total count in title


##Count of values in one column:
CA=A
CA_1=CA.groupby('a').count()


### Date time format





##Fuzzy wuzzy to compare partial match.
F1=pd.read_csv('G:/Interview Preparation/Python/Dataset_Pandas/NetflixOriginals.csv')
F2=pd.read_csv('G:/Interview Preparation/Python/Dataset_Pandas/Netflix_mismatch.csv')












###connect SQL with pandas Example:
import mysql.connector as sql
db_connection1 = sql.connect(host='mysqltest.vigital.local', database='user_vikatan', user='root', password='83X41Pqd3sfy')
db1 = pd.read_sql("SELECT * FROM `user` WHERE `End_Date` >= '2019-09-10 00:00:00' AND `Status` = 1 ORDER BY `user_subscription_updated`.`End_Date` DESC",db_connection1)

##Connect Mangodb with pandas Examples
from pymongo import MongoClient
import pymongo
uri = "mongodb://admin:e828z4GP6A9D@10.10.2.66:30128/appappo?authSource=admin"
client = MongoClient(uri)
db = client.appappo

A= db.transaction
data_transaction = pd.DataFrame(list(A.find({}, 
    { 
        "_id" : "$_id", 
        "amount" : "$amount",
        "gateway":"$gateway",
        "transaction_date":"$transaction_date",
        "user_id":"$user_id"
    })))


##TO CSV
result.to_csv(r'G:\Interview Preparation\Python\Dataset\result.csv')


##Pivot table:
p=A
p_new=p.pivot_table(values='IMDB Score',aggfunc='sum',index='Genre')
p_new_1=p.pivot_table(values='IMDB Score',aggfunc='count',index='Genre')
p_new_2=p.pivot_table(values='IMDB Score',aggfunc='mean',index='Genre')
p_new_3=p.pivot_table(index='Title', values=['IMDB Score', 'Runtime'],
                        columns=['Genre','Language'],
                        aggfunc={'IMDB Score': np.sum, 'Runtime': np.mean})
###Index is TITLE AND columns is ALL GENRE AND LANGUAGE like IMDB_+ALL GENRE AND Language
#FILls the sum of all IMDB Score AND average of runtime on separate column.



###Split function







###Generators





###Lambda







### Decorators







###Slicers







###Tricage









##Regrex:








#condition in ILOC 








###Filter using condition



















   
    
    
    
    
    

    














    


    
    
    
    
    
    
        
    


    
    


    
    


      
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
